from flask import Flask, render_template, url_for, jsonify, request
import requests
from tableau_data import TableauData, convert_raw_tableau_data

app = Flask(__name__)
# Add your Wordsmith info here
wordsmith_api_key = ''
wordsmith_project_slug = 'wordsmith-tutorial'
wordsmith_template_slug = 'wordsmith-tutorial-template'

@app.route('/')
def index():
    """Render our HTML template that is located in the /templates directory
    """
    return render_template('index.html')

@app.route('/get-narrative', methods=['POST'])
def get_narrative():
    """Accept JSON representing Tableau data (expects data generated by the Tableau
    Helper lib), aggregate data into a Wordsmith-ready form using the tableau_data
    Python lib, send it to Wordsmith and return the resulting narrative.
    """
    post_data = request.get_json()
    wordsmith_data = build_wordsmith_data(post_data)
    url = 'https://api.automatedinsights.com/v1.5/projects/{}/templates/{}/outputs'.format(wordsmith_project_slug, wordsmith_template_slug)
    headers = {
        'Authorization': 'Bearer {}'.format(wordsmith_api_key),
        'User-Agent': 'Wordsmith + Tableau Tutorial'
    }
    r = requests.post(url, headers=headers, json=wordsmith_data)
    return jsonify(r.json())

def build_wordsmith_data(post_data):
    """Transform tabular data from Tableau into an aggregated dataset that can be
    sent to Wordsmith.
    """
    tableau_data = TableauData(convert_raw_tableau_data(post_data['columns'], post_data['data']))
    aggregated_data = []
    for quarter_data in tableau_data.by('QUARTER(Order Date)'):
        aggregated_data.append(dict(
            quarter=int((quarter_data[0]['QUARTER(Order Date)'].month - 1) / 3) + 1,
            year=quarter_data[0]['QUARTER(Order Date)'].year,
            total_sales = sum([row['SUM(Sales)'] for row in quarter_data.rows()]),
            deal_size = sum([row['SUM(Sales)'] for row in quarter_data.rows()]) / len([row['SUM(Sales)'] for row in quarter_data.rows()])
        ))
    sales_best = sorted(aggregated_data, key=lambda k: k['total_sales'])[-1]
    deal_size_best = sorted(aggregated_data, key=lambda k: k['deal_size'])[-1]
    wordsmith_data = dict(
        data = dict(
            sales_best_quarter = sales_best['quarter'],
            sales_best_quarter_year = sales_best['year'],
            deal_size_best_quarter = deal_size_best['quarter'],
            deal_size_best_quarter_year = deal_size_best['year']
        )
    )
    return wordsmith_data

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000, debug=True)