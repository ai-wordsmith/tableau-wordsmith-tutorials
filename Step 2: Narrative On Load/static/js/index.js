// Put the Link URL from your Tableau Viz's share function here
const vizShareUrl = 'https://public.tableau.com/views/YTDSalesbyProduct/YTDSalesbyProduct?:embed=y&:display_count=yes';

// Set our Tableau Helper var as global so we can reference anywhere in this file
var th;

/*
This function contains all the code that should be executed when our visualization
loads. In this section, we will define the DIV where the viz will be embedded, set
some basic options, and most importantly, we will define the onFirstInteractive
functionality. The onFirstInteractive section runs after the visualization has
completely loaded. This is also where we will define any event listeners that we
want to establish.
*/
function loadViz() {
var containerDiv = $('#tableauViz')[0],
    url = vizShareUrl,
    options = {
        hideTabs: true,
        hideToolbar: true,
        // set first run options
        onFirstInteractive: function() {
            th = new TableauHelper(viz);
            th.getSheet('ProductbyCategory').getSummaryData(defaultOptions, []).then((data) => {
                getNarrative(data);
            });
        }
    }
let viz = new tableau.Viz(containerDiv, url, options);
}

/*
Generic function to asynchronously pass data to our back-end service. We pass data
generated by the Tableau Helper to the back-end to be processed and subsequently
passed to Wordsmith. A successful request to Wordsmith will result in narrative
being returned and displayed in the DIV with an ID of wordsmithNarrative.
*/
function getNarrative(tableauData) {
    $.ajax({
        type: 'POST',
        url: '/get-narrative',
        contentType: 'application/json; charset=utf-8',
        data: JSON.stringify(tableauData),
        dataType: 'json',
        success: (response) => {
            // In some instances, Wordsmith will return a success code even if it
            // failed to generate narrative successfully. Most often this happens
            // because the request itself succeeded but a required data variable
            // was not passed. So, even though we have a successful request we
            // still need to check that it doesn't contain an "errors" property.
            if (response.hasOwnProperty('errors')) {
                // For convenience, we'll log the response object to the console
                // in the event of an error. This makes it easy for us to inspect
                // the response to figure out what happened.
                console.log(response);
                $('#wordsmithNarrative').text('Uh oh, there was an error generating your narrative.')
            } else {
                $('#wordsmithNarrative').text(response.data.content);
            }
        },
        error: (response) => {
            // Log the error response to the console here as well.
            console.log(response);
            $('#wordsmithNarrative').text('Uh oh, there was an error generating your narrative.')
        }
    });
}

/*
Run this code after the HTML DOM has finished loading
*/
$(() => {
loadViz();
});
